import java.util.regex.Pattern

plugins {
	// Only used for tests
	id 'groovy'
	id 'java-library'
	// TODO try to get this working
//	id 'org.moditect.gradleplugin' version '1.0.0-rc3'
	id 'maven-publish'
	id 'signing'
}

group = 'gg.xp'

repositories {
	mavenCentral()
}

java {
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'XivAPI Java Client'
				description = 'A XivAPI client library for Java'
				url = 'https://github.com/xiv-gear-planner/xivapi-java/'
				licenses {
					license {
						name = 'GPLv3'
						url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
					}
				}
				developers {
					developer {
						id = 'xp'
						name = 'xp'
						email = 'wdxiv@icloud.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/xiv-gear-planner/xivapi-java.git'
					developerConnection = 'scm:git:git://github.com/xiv-gear-planner/xivapi-java.git'
					url = 'https://github.com/xiv-gear-planner/xivapi-java/'
				}
			}
		}
	}
	repositories {
		mavenLocal()
		if (project.properties["publishGH"]) {
			maven {
				name = "GitHubPackages"
				url = "https://maven.pkg.github.com/xiv-gear-planner/xivapi-java"
				credentials {
					username = System.getenv("GITHUB_ACTOR")
					password = System.getenv("GITHUB_TOKEN")
				}
			}
		}
		if (project.properties["publishOSS"]) {
			maven {
				name = "SonatypeOSS"
				url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
				credentials {
					username = project.findProperty("ossrhUsername") ?: System.getenv("OSS_USER")
					password = project.findProperty("ossrhPassword") ?: System.getenv("OSS_PASS")
				}
			}
		}
	}
}

dependencies {
	testImplementation 'org.apache.groovy:groovy:4.0.22'
	implementation 'org.slf4j:slf4j-api:2.0.12'
	// https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
	api group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3.1'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.2'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	compileOnly 'org.jetbrains:annotations:24.1.0'

	testImplementation platform('org.junit:junit-bom:5.11.0')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'ch.qos.logback:logback-classic:1.5.6'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	doFirst {
		jvmArgs += '--add-opens'
		jvmArgs += 'java.base/java.lang.reflect=ALL-UNNAMED'
//		jvmArgs += 'java.base/java.lang.reflect=gg.xp.xivapi'
	}

	// Configure Gradle to avoid forking new JVMs
	forkEvery = 0
	maxParallelForks = 1

	// Configure JUnit 5 parallel execution
	systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
	systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
	systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
	systemProperty 'junit.jupiter.execution.parallel.mode.methods.default', 'concurrent'
	systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'fixed'
	systemProperty 'junit.jupiter.execution.parallel.config.fixed.parallelism', '8'

}

//def mainPkg = 'gg.xp.xivapi'

//moditect {
//	moduleName = mainPkg
//	requires {
//		inferredModules = true
//	}
////	addMainModuleInfo {
////		version = project.version
////		overwriteExistingFiles = true
////		modules {
////			moduleInfo {
////				name = mainPkg
////				exports = mainPkg
////			}
////		}
////	}
//}


// Task to remove the -SNAPSHOT suffix
tasks.register('removeSnapshotSuffix') {
	doLast {
		def pattern = Pattern.compile('(\\d+\\.\\d+\\.\\d+)-SNAPSHOT')
		def matcher = pattern.matcher(project.version.toString())
		if (matcher.matches()) {
			def newVersion = matcher.group(1)
			project.version = newVersion

			logger.lifecycle("New version: ${newVersion}")
			def versionFile = file('gradle.properties')
			logger.lifecycle("Version file: ${versionFile.absolutePath}")
			versionFile.text = versionFile.text.replaceAll('version=.*', "version=${newVersion}")
		}
		else {
			throw new GradleException("Bad version: ${project.version}")
		}
	}
}

// Task to bump the version to the next patch and add -SNAPSHOT suffix
tasks.register('bumpVersion') {
	doLast {
		def pattern = Pattern.compile('(\\d+)\\.(\\d+)\\.(\\d+)')
		def matcher = pattern.matcher(project.version.toString())
		if (matcher.matches()) {
			def major = matcher.group(1).toInteger()
			def minor = matcher.group(2).toInteger()
			def patch = matcher.group(3).toInteger() + 1
			def newVersion = "${major}.${minor}.${patch}-SNAPSHOT"
			project.version = newVersion

			logger.lifecycle("New version: ${newVersion}")
			def versionFile = file('gradle.properties')
			logger.lifecycle("Version file: ${versionFile.absolutePath}")
			versionFile.text = versionFile.text.replaceAll('version=.*', "version=${newVersion}")
		}
		else {
			throw new GradleException("Bad version: ${project.version}")
		}
	}
}

// Ensure the tasks run in sequence
bumpVersion.mustRunAfter removeSnapshotSuffix


tasks.register('printVersion') {
	doLast {
		println project.version
	}
}

tasks.register('verifySnapshotSuffix') {
	doLast {
		def pattern = Pattern.compile('(\\d+\\.\\d+\\.\\d+)-SNAPSHOT')
		def matcher = pattern.matcher(project.version.toString())
		if (!matcher.matches()) {
			throw new GradleException("Version '${project.version}' does not have the '-SNAPSHOT' suffix.")
		}
	}
}

tasks.register('javadocJar')

signing {
	useGpgCmd()
	sign publishing.publications.mavenJava
}

if (project.findProperty("enableSigning")) {
	tasks.withType(Sign)*.enabled = true
}
else {
	tasks.withType(Sign)*.enabled = false
}